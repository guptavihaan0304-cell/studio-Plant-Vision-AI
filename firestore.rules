/**
 * @fileoverview Firestore Security Rules for the Plant Analysis Application.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user accounts and plant analysis data,
 * with public read access to copyright information.  All write operations require authentication and proper authorization.
 *
 * Data Structure:
 * - User accounts are stored under `/users/{userId}`.
 * - Plant analysis results are nested under `/users/{userId}/plantAnalyses/{plantAnalysisId}`.
 * - Growth tracker notes are nested under `/users/{userId}/plantAnalyses/{plantAnalysisId}/growthTrackers/{growthTrackerId}`.
 * - Copyright information is stored in a singleton document at `/copyright/info`.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own user account data, plant analysis results, and growth notes.
 * - Listing data is restricted to the owning user.
 * - Copyright information is publicly readable but not writable.
 * - The `userAccountId` field is denormalized into the `PlantAnalysis` document to allow rules to validate ownership without extra reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user account documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own account: request.auth.uid == userId
     * @deny (create) Authenticated user attempts to create another user's account: request.auth.uid != userId
     * @allow (get, update, delete) Authenticated user accesses their own account: request.auth.uid == userId
     * @deny (get, update, delete) Authenticated user attempts to access another user's account: request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(path(request.path));
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for plant analysis documents nested under a user account.
     * @path /users/{userId}/plantAnalyses/{plantAnalysisId}
     * @allow (create) Authenticated user creates a plant analysis result under their account: request.auth.uid == userId && request.resource.data.userAccountId == userId
     * @deny (create) Authenticated user attempts to create a plant analysis result under another user's account: request.auth.uid != userId
     * @allow (get, update, delete) Authenticated user accesses their own plant analysis result: request.auth.uid == userId && resource.data.userAccountId == userId
     * @deny (get, update, delete) Authenticated user attempts to access another user's plant analysis result: request.auth.uid != userId
     * @principle Enforces document ownership for all operations, with denormalized `userAccountId` for efficient authorization.
     */
    match /users/{userId}/plantAnalyses/{plantAnalysisId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null && resource.data.userAccountId == userId;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userAccountId == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Enforces user-ownership for growth tracker documents.
       * @path /users/{userId}/plantAnalyses/{plantAnalysisId}/growthTrackers/{growthTrackerId}
       * @allow (create, list, get) Authenticated user accesses their own growth notes: request.auth.uid == userId
       * @deny (create, list, get) Authenticated user attempts to access another user's growth notes: request.auth.uid != userId
       * @principle Inherits ownership from the parent plant analysis document.
       */
      match /growthTrackers/{growthTrackerId} {
        allow get, list: if isOwner(userId);
        allow create: if isOwner(userId) && request.resource.data.userId == userId;
        allow update, delete: if false; // Disallow updates and deletes for simplicity
      }
    }

    /**
     * @description Provides public read access to copyright information. Write access is denied.
     * @path /copyright/info
     * @allow (get, list) Any user can read the copyright information.
     * @deny (create, update, delete) No user can create, update, or delete the copyright information.
     * @principle Allows public read access to copyright information.
     */
    match /copyright/info {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}
